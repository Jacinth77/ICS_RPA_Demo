{"id":"RobotBrowserTemplate","robotType":"ROBOT","mainClass":"com.novayre.jidoka.robot.test.RobotBrowserTemplate","actions":["start","resetvariables","navigateToCustomerWeb","navigateToGoogleWeb","SelectQueue","releaseitems","encrptPDF","writeToExcel","Move_File","closeQueue","getdata","end","customerEnd","googleEnd"],"conditionalActions":["startUp","MaxCountReached","customerRetry","googleRetry","hasMoreItems"],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * Action \"start\".\n\t */\npublic void start() throws Exception {\n    server = (IJidokaServer<?>) JidokaFactory.getServer();\n    client = IClient.getInstance(this);\n    browser = IWebBrowserSupport.getInstance(this, client);\n    qmanager = server.getQueueManager();\n    queueCommons = new  QueueCommons();\n    webApplication = new  ICS_WebApplication();\n    excelDSRow = new  ExcelDSRow();\n    queueCommons.init(qmanager);\n    dataProvider = IJidokaDataProvider.getInstance(this, IJidokaDataProvider.Provider.EXCEL);\n    server.setNumberOfItems(1);\n    excel = IExcel.getExcelInstance(this);\n    server = (IJidokaServer<?>) JidokaFactory.getServer();\n    //excelinput= new Excel_Input();\n    client = IClient.getInstance(this);\n    browser = IWebBrowserSupport.getInstance(this, client);\n}"},{"id":"resetvariables","implementation":"public void resetvariables() {\n    server.info(\"Reset Variables\");\n    returnType = \"No\";\n    webApplication.reset();\n}"},{"id":"navigateToCustomerWeb","implementation":"/**\n\t * Navigate to Web Page\n\t * \n\t * @throws Exception\n\t */\npublic void navigateToCustomerWeb() throws Exception {\n    //Set File Name for Customer Xpath\n    String cXpathFileName = server.getEnvironmentVariables().get(\"customerXpathFileName\").toString();\n    server.info(\"InputID \" + excelinput.getInput_ID());\n    webApplication.PerformOperation(cXpathFileName, excelinput.getInput_ID());\n}"},{"id":"navigateToGoogleWeb","implementation":"public void navigateToGoogleWeb() throws Exception {\n    //Set File Name for Google Xpath\n    String gXpathFileName = server.getEnvironmentVariables().get(\"GoogleXpathFileName\").toString();\n    server.info(\"InputID \" + excelinput.getInput_ID());\n    webApplication.PerformOperation(gXpathFileName, excelinput.getInput_ID());\n}"},{"id":"SelectQueue","implementation":"public void SelectQueue() throws Exception {\n    try {\n        if (StringUtils.isNotBlank(qmanager.preselectedQueue())) {\n            selectedQueueID = qmanager.preselectedQueue();\n            server.info(\"Selected queue ID: \" + selectedQueueID);\n            addItemsToQueue();\n            currentQueue = queueCommons.getQueueFromId(selectedQueueID);\n        } else {\n            String inputFilePath = server.getEnvironmentVariables().get(\"InputFilePath\").toString().replace(\"*\", \"\\\\\");\n            selectedQueueID = queueCommons.createQueue(inputFilePath);\n            server.info(\"Queue ID: \" + selectedQueueID);\n            addItemsToQueue();\n            currentQueue = queueCommons.getQueueFromId(selectedQueueID);\n        }\n    } catch (Exception e) {\n        throw new  JidokaQueueException(\"Unable to find / Create Queue\" + e);\n    }\n}"},{"id":"releaseitems","implementation":"public void releaseitems() throws Exception {\n    if (webApplication.dict.isEmpty()) {\n        Status = \"Employee Not Found\";\n    }\n    updateInputExcel(Status);\n    Map<String, String> funcData = currentItemQueue.functionalData();\n    funcData.put(Excel_Input_RowMapper.Status, Status);\n    ReleaseItemWithOptionalParameters rip = new  ReleaseItemWithOptionalParameters();\n    rip.functionalData(funcData);\n    qmanager.releaseItem(rip);\n}"},{"id":"encrptPDF","implementation":"public void encrptPDF() throws IOException {\n    if (webApplication.dict.isEmpty() == false) {\n        File file = new  File(OutputFilepath + \".pdf\");\n        PDDocument document = PDDocument.load(file);\n        AccessPermission ap = new  AccessPermission();\n        String password = \"ICS\" + webApplication.dict.get(\"Emp\");\n        StandardProtectionPolicy spp = new  StandardProtectionPolicy(password, password, ap);\n        spp.setEncryptionKeyLength(128);\n        spp.setPermissions(ap);\n        document.protect(spp);\n        server.info(\"Document encrypted\");\n        document.save(OutputFilepath + \".pdf\");\n        document.close();\n    }\n}"},{"id":"writeToExcel","implementation":"public void writeToExcel() throws Exception {\n    server.info(webApplication.dict.isEmpty());\n    if (webApplication.dict.isEmpty() == false) {\n        server.info(\"Inside WritetoExcel\");\n        String excelPath = Paths.get(server.getCurrentDir(), \"FinalTemplate.xlsx\").toString();\n        try (IExcel excelIns = IExcel.getExcelInstance(this)) {\n            server.info(\"Excel Path\" + excelPath);\n            excelIns.init(excelPath);\n            server.info(\"EmpValue\" + webApplication.dict.get(\"Emp\"));\n            server.info(\"NameValue\" + webApplication.dict.get(\"Name\"));\n            excelIns.setCellValueByName(\"I5\", LocalDate.now().toString());\n            excelIns.setCellValueByName(\"G10\", webApplication.dict.get(\"Emp\"));\n            excelIns.setCellValueByName(\"G12\", webApplication.dict.get(\"Name\"));\n            excelIns.setCellValueByName(\"G14\", webApplication.dict.get(\"Designation\"));\n            excelIns.setCellValueByName(\"G16\", webApplication.dict.get(\"Email id\"));\n            excelIns.setCellValueByName(\"G18\", webApplication.dict.get(\"Mobile\"));\n            excelIns.setCellValueByName(\"G20\", webApplication.dict.get(\"Project Code\"));\n            excelIns.setCellValueByName(\"G22\", webApplication.dict.get(\"Practice Unit\"));\n            excelIns.setCellValueByName(\"G24\", webApplication.dict.get(\"Current Location\"));\n            excelIns.setCellValueByName(\"G26\", webApplication.dict.get(\"Current City\"));\n            excelIns.setCellValueByName(\"G28\", \"EN1234\");\n            server.info(\"End of Write\");\n            excelIns.close();\n            Desktop.getDesktop().open(Paths.get(server.getCurrentDir(), \"FinalTemplate.xlsx\").toFile());\n            TimeUnit.SECONDS.sleep(8);\n            client.typeText(client.getKeyboardSequence().pressAlt().type(\"f\").releaseAlt());\n            TimeUnit.SECONDS.sleep(3);\n            client.typeText(client.getKeyboardSequence().type(\"e\"));\n            TimeUnit.SECONDS.sleep(3);\n            client.typeText(client.getKeyboardSequence().type(\"a\"));\n            TimeUnit.SECONDS.sleep(3);\n            OutputFilepath = server.getEnvironmentVariables().get(\"OutPutFilePath\").toString().replace(\"*\", \"\\\\\") + \"\\\\\" + webApplication.dict.get(\"Emp\") + \" - \" + webApplication.dict.get(\"Name\");\n            server.info(\"OutputFilepath  :\" + OutputFilepath);\n            client.typeText(client.getKeyboardSequence().type(OutputFilepath));\n            windows.keyboard().enter();\n            TimeUnit.SECONDS.sleep(3);\n            Runtime.getRuntime().exec(\"taskkill /F /IM EXCEL.exe\");\n            server.setCurrentItemResultToOK(\"Values Updated in Excel sheet\");\n        } catch (Exception e) {\n            throw new  JidokaItemException(\"Write to Excel\" + e);\n        }\n    }\n}"},{"id":"Move_File","implementation":"public void Move_File() {\n}"},{"id":"closeQueue","implementation":"public void closeQueue() {\n}"},{"id":"getdata","implementation":"public void getdata() {\n}"},{"id":"end","implementation":"public void end() {\n    server.info(\"End of Process\");\n}"},{"id":"customerEnd","implementation":"public void customerEnd() {\n    server.info(\"End of Customer Web\");\n}"},{"id":"googleEnd","implementation":"public void googleEnd() {\n    server.info(\"End of Google Doc Web\");\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"/**\n\t * Action \"startUp\".\n\t * <p>\n\t * This method is overrriden to initialize the Appian RPA modules instances.\n\t */\n@Override\npublic boolean startUp() throws Exception {\n    server = (IJidokaServer<?>) JidokaFactory.getServer();\n    client = IClient.getInstance(this);\n    browser = IWebBrowserSupport.getInstance(this, client);\n    windows = IJidokaRobot.getInstance(this);\n    return IRobot.super.startUp();\n}"},{"id":"MaxCountReached","implementation":"public String MaxCountReached() {\n    if (returnType.contains(\"MaxCountReached\")) {\n        Status = \"Failed\";\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}"},{"id":"customerRetry","implementation":"public String customerRetry() throws Exception {\n    returnType = webApplication.RetryRequired();\n    if (returnType.contains(\"Yes\")) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}"},{"id":"googleRetry","implementation":"public String googleRetry() throws Exception {\n    returnType = webApplication.RetryRequired();\n    if (returnType.contains(\"Yes\")) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}"},{"id":"hasMoreItems","implementation":"public String hasMoreItems() throws Exception {\n    currentItemQueue = queueCommons.getNextItem(currentQueue);\n    if (currentItemQueue != null) {\n        server.info(\"current item key\" + currentItemQueue.functionalData().get(\"Input_ID\"));\n        excelinput = new  Excel_Input();\n        excelinput.setInput_ID(currentItemQueue.functionalData().get(\"Input_ID\"));\n        excelinput.setStatus(currentItemQueue.functionalData().get(\"Status\"));\n        server.info(\"Input Customer ID -\" + excelinput.getInput_ID());\n        server.setCurrentItem(currentItemIndex++, currentItemQueue.key());\n        Status = \"Success\";\n        webApplication.resetDictionary();\n        return \"Yes\";\n    }\n    return \"No\";\n}"}],"sdkMethods":[]}