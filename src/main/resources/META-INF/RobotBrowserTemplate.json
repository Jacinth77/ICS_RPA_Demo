{"id":"RobotBrowserTemplate","robotType":"ROBOT","mainClass":"com.novayre.jidoka.robot.test.RobotBrowserTemplate","actions":["start","resetvariables","navigateToCustomerWeb","navigateToGoogleWeb","SelectQueue","releaseitems","write_to_Excel","Move_File","closeQueue","getdata","end","customerEnd","googleEnd"],"conditionalActions":["startUp","MaxCountReached","customerRetry","googleRetry","hasMoreItems"],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * Action \"start\".\n\t */\npublic void start() throws Exception {\n    server = (IJidokaServer<?>) JidokaFactory.getServer();\n    client = IClient.getInstance(this);\n    browser = IWebBrowserSupport.getInstance(this, client);\n    qmanager = server.getQueueManager();\n    queueCommons = new  QueueCommons();\n    webApplication = new  ICS_WebApplication();\n    excelDSRow = new  ExcelDSRow();\n    queueCommons.init(qmanager);\n    dataProvider = IJidokaDataProvider.getInstance(this, IJidokaDataProvider.Provider.EXCEL);\n    server.setNumberOfItems(1);\n    excel = IExcel.getExcelInstance(this);\n    server.setNumberOfItems(1);\n    server = (IJidokaServer<?>) JidokaFactory.getServer();\n    //excelinput= new Excel_Input();\n    client = IClient.getInstance(this);\n    browser = IWebBrowserSupport.getInstance(this, client);\n}"},{"id":"resetvariables","implementation":"public void resetvariables() {\n    server.info(\"Reset Variables\");\n    returnType = \"No\";\n    webApplication.reset();\n}"},{"id":"navigateToCustomerWeb","implementation":"/**\n\t * Navigate to Web Page\n\t * \n\t * @throws Exception\n\t */\npublic void navigateToCustomerWeb() throws Exception {\n    //Set File Name for Customer Xpath\n    String cXpathFileName = server.getEnvironmentVariables().get(\"customerXpathFileName\").toString();\n    server.info(\"InputID \" + excelinput.getInput_ID());\n    webApplication.PerformOperation(cXpathFileName, excelinput.getInput_ID());\n}"},{"id":"navigateToGoogleWeb","implementation":"public void navigateToGoogleWeb() throws Exception {\n    //Set File Name for Google Xpath\n    String gXpathFileName = server.getEnvironmentVariables().get(\"GoogleXpathFileName\").toString();\n    server.info(\"InputID \" + excelinput.getInput_ID());\n    webApplication.PerformOperation(gXpathFileName, excelinput.getInput_ID());\n}"},{"id":"SelectQueue","implementation":"public void SelectQueue() throws Exception {\n    if (StringUtils.isNotBlank(qmanager.preselectedQueue())) {\n        selectedQueueID = qmanager.preselectedQueue();\n        server.info(\"Selected queue ID: \" + selectedQueueID);\n        currentQueue = queueCommons.getQueueFromId(selectedQueueID);\n    } else {\n        String inputFilePath = server.getEnvironmentVariables().get(\"InputFilePath\").toString();\n        selectedQueueID = queueCommons.createQueue(inputFilePath);\n        server.info(\"Queue ID: \" + selectedQueueID);\n        addItemsToQueue();\n        currentQueue = queueCommons.getQueueFromId(selectedQueueID);\n    }\n}"},{"id":"releaseitems","implementation":"public void releaseitems() throws IOException, JidokaQueueException {\n    Map<String, String> funcData = currentItemQueue.functionalData();\n    funcData.put(Excel_Input_RowMapper.Status, \"Success\");\n    ReleaseItemWithOptionalParameters rip = new  ReleaseItemWithOptionalParameters();\n    rip.functionalData(funcData);\n    qmanager.releaseItem(rip);\n}"},{"id":"write_to_Excel","implementation":"public void write_to_Excel() {\n}"},{"id":"Move_File","implementation":"public void Move_File() {\n}"},{"id":"closeQueue","implementation":"public void closeQueue() {\n}"},{"id":"getdata","implementation":"public void getdata() {\n}"},{"id":"end","implementation":"/**\n\t * Last action of the robot.\n\t */\npublic void end() {\n    server.info(\"End of Process\");\n}"},{"id":"customerEnd","implementation":"public void customerEnd() {\n    server.info(\"End of Customer Web\");\n}"},{"id":"googleEnd","implementation":"public void googleEnd() {\n    server.info(\"End of Google Doc Web\");\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"/**\n\t * Action \"startUp\".\n\t * <p>\n\t * This method is overrriden to initialize the Appian RPA modules instances.\n\t */\n@Override\npublic boolean startUp() throws Exception {\n    server = (IJidokaServer<?>) JidokaFactory.getServer();\n    client = IClient.getInstance(this);\n    browser = IWebBrowserSupport.getInstance(this, client);\n    return IRobot.super.startUp();\n}"},{"id":"MaxCountReached","implementation":"public String MaxCountReached() {\n    if (returnType.contains(\"maxCountReached\")) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}"},{"id":"customerRetry","implementation":"public String customerRetry() throws Exception {\n    returnType = webApplication.RetryRequired();\n    if (returnType.contains(\"Yes\")) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}"},{"id":"googleRetry","implementation":"public String googleRetry() throws Exception {\n    returnType = webApplication.RetryRequired();\n    if (returnType.contains(\"Yes\")) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}"},{"id":"hasMoreItems","implementation":"public String hasMoreItems() throws Exception {\n    // retrieve the next item in the queue\n    //QueueCommons queueCommons = new QueueCommons();\n    currentItemQueue = queueCommons.getNextItem(currentQueue);\n    if (currentItemQueue != null) {\n        server.info(\"current item key\" + currentItemQueue.functionalData().get(\"Input_ID\"));\n        excelinput = new  Excel_Input();\n        excelinput.setInput_ID(currentItemQueue.functionalData().get(\"Input_ID\"));\n        excelinput.setStatus(currentItemQueue.functionalData().get(\"Status\"));\n        server.info(\"ggggggg\" + excelinput.getInput_ID());\n        // set the stats for the current item\n        server.setCurrentItem(currentItemIndex++, currentItemQueue.key());\n        return \"Yes\";\n    }\n    return \"No\";\n}"}],"sdkMethods":[]}